+*In[90]:*+
[source, ipython3]
----
import random
class Sentiment:
    NEGATIVE = 'NEGATIVE'
    NEUTRAL = 'NEUTRAL'
    POSITIVE = 'POSITIVE'

class Review:
    def __init__(self, text, score):
        self.text = text
        self.score = score
        self.sentiment = self.get_sentiment()
        
    def get_sentiment(self):
        if self.score <= 2:
            return Sentiment.NEGATIVE
        elif self.score == 3:
            return Sentiment.NEUTRAL
        else: #the score higher than 4
            return Sentiment.POSITIVE

class ReviewContainer:
    
    def __init__(self, reviews):
        self.reviews = reviews
        
    def get_text(self):
        return [x.text for x in self.reviews]
    def get_sentiment(self):
        return [x.sentiment for x in self.reviews]
    
    def evenly_distribute(self):
        negative = list(filter(lambda x: x.sentiment == Sentiment.NEGATIVE, self.reviews))
        positive = list(filter(lambda x: x.sentiment == Sentiment.POSITIVE, self.reviews))
        positive_shrunk = positive[:len(negative)]
        
        self.reviews = positive_shrunk + negative
        random.shuffle(self.reviews)
        
----


+*In[68]:*+
[source, ipython3]
----
import json

file_name = 'D:\Books_small_10000.json'

reviews = [] #create a list

with open(file_name) as f:
    for line in f:
        review = json.loads(line)
        reviews.append(Review(review['reviewText'], review['overall'])) #list contain reviewText and Overall

----


+*In[88]:*+
[source, ipython3]
----
from sklearn.model_selection import train_test_split

training, test = train_test_split(reviews, test_size = 0.33, random_state = 42)

train_container = ReviewContainer(training)
test_container = ReviewContainer(test)

----


+*In[110]:*+
[source, ipython3]
----
train_container.evenly_distribute()
train_x = train_container.get_text() #text
train_y = train_container.get_sentiment() #sentiment

test_container.evenly_distribute()
test_x = test_container.get_text()
test_y = test_container.get_sentiment()

#train_y.count(Sentiment.POSITIVE)
#train_y.count(Sentiment.NEGATIVE)

----


+*In[111]:*+
[source, ipython3]
----
from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()

train_x_vectors = vectorizer.fit_transform(train_x)
test_x_vectors = vectorizer.transform(test_x)

train_x_vectors.toarray()




----


+*Out[111]:*+
----array([[0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       ...,
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0],
       [0, 0, 0, ..., 0, 0, 0]], dtype=int64)----


+*In[112]:*+
[source, ipython3]
----
#SVC
from sklearn.svm import SVC

clf_svm = SVC(kernel = 'linear', gamma='auto')
clf_svm.fit(train_x_vectors, train_y)

clf_svm.predict(test_x_vectors[0])

----


+*Out[112]:*+
----array(['NEGATIVE'], dtype='<U8')----


+*In[95]:*+
[source, ipython3]
----
# Decision Tree

from sklearn.tree import DecisionTreeClassifier

clf_tree = DecisionTreeClassifier()
clf_tree.fit(train_x_vectors, train_y)

clf_tree.predict(test_x_vectors[0])


----


+*Out[95]:*+
----array(['POSITIVE'], dtype='<U8')----


+*In[101]:*+
[source, ipython3]
----
#Naive_Bayes

from sklearn.naive_bayes import GaussianNB

clf_nb = GaussianNB()
clf_nb.fit(train_x_vectors.toarray(), train_y)
clf_nb.predict(test_x_vectors[0].toarray())
----


+*Out[101]:*+
----array(['POSITIVE'], dtype='<U8')----


+*In[96]:*+
[source, ipython3]
----
#Log Regression

from sklearn.linear_model import LogisticRegression

clf_log = LogisticRegression()

clf_log.fit(train_x_vectors, train_y)
clf_log.predict(test_x_vectors)

----


+*Out[96]:*+
----array(['POSITIVE', 'POSITIVE', 'POSITIVE', ..., 'POSITIVE', 'NEGATIVE',
       'POSITIVE'], dtype='<U8')----


+*In[113]:*+
[source, ipython3]
----
# Mean Accuracy

print(clf_log.score(test_x_vectors, test_y))
print(clf_nb.score(test_x_vectors.toarray(), test_y))
print(clf_tree.score(test_x_vectors, test_y))
print(clf_svm.score(test_x_vectors, test_y))
----


+*Out[113]:*+
----
0.8149038461538461
0.6346153846153846
0.6274038461538461
0.7980769230769231
----


+*In[114]:*+
[source, ipython3]
----
# F1 Score

from sklearn.metrics import f1_score


f1_score(test_y, clf_svm.predict(test_x_vectors), average=None, labels =[Sentiment.POSITIVE,Sentiment.NEGATIVE])

----


+*Out[114]:*+
----array([0.8028169 , 0.79310345])----


+*In[115]:*+
[source, ipython3]
----

----


+*Out[115]:*+
----208----
